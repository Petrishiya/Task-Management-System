import { AfterViewInit, Component, Inject, Input, OnInit, PLATFORM_ID } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TaskService } from '../task.service';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

declare var bootstrap: any; // Declare bootstrap to be used in the template

@Component({
  selector: 'app-create-task',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    MatInputModule,
    MatFormFieldModule,
    MatSelectModule,
    MatButtonModule,
    MatIconModule
  ],
  templateUrl: './create-task.component.html',
  styleUrls: ['./create-task.component.css']
})
export class CreateTaskComponent implements OnInit,AfterViewInit {

  modal: any;

  constructor(private fb: FormBuilder, private taskService: TaskService,@Inject(PLATFORM_ID) private platformId: Object) {}

  

  ngAfterViewInit() {
    if (isPlatformBrowser(this.platformId)) {
      const modalElement = document.getElementById('taskModal');
      if (modalElement) {
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
      }
    }
  }
  
  @Input() set showModal(value: boolean) {
    if (value) {
      this.modal?.show();
    }
  }

  [x: string]: any;

  taskForm!: FormGroup;
  assignees: string[] = [];
  creators: string[] = [];
  statuses: string[] = [];

 
  ngOnInit(): void
  
  {
    this.taskForm = this.fb.group({
      name: ['', [Validators.required, Validators.pattern('^[a-zA-Z0-9 ]+$')]],
      description: ['', Validators.required],
      assignee: ['', Validators.required],
      creator: ['', Validators.required],
      status: ['', Validators.required],

     
    });

    this.fetchAssignees();
    this.fetchCreators();
    this.fetchStatuses();
  }
    
  

  fetchAssignees(): void {
    this.taskService.getAssignees().subscribe(
      data => {
        this.assignees = data;
      },
      error => {
        console.error('Error fetching assignees', error);
      }
    );
  }

  fetchCreators(): void {
    this.taskService.getCreators().subscribe(
      data => {
        this.creators = data;
      },
      error => {
        console.error('Error fetching creators', error);
      }
    );
  }

  fetchStatuses(): void {
    this.taskService.getStatuses().subscribe(
      data => {
        this.statuses = data;
      },
      error => {
        console.error('Error fetching statuses', error);
      }
    );
  }

  onSubmit(): void {
    if (this.taskForm.valid) {
      const task = {
        id: null,  // id will be generated by the backend
        name: this.taskForm.get('name')?.value,
        description: this.taskForm.get('description')?.value,
        assignee: this.taskForm.get('assignee')?.value,
        creator: this.taskForm.get('creator')?.value,
        status: this.taskForm.get('status')?.value
      };

      this.taskService.createTask(task).subscribe(
        response => {
          console.log('Task created successfully', response);

          alert('Task created successfully');
          // Optionally reset the form after successful creation
          this.taskForm.reset();
        },
        error => {
          console.error('Error creating task', error);
        }
      );
    }
  }
}
